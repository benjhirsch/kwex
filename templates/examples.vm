Example Velocity Template
=========================

This template file contains examples of the different structures you can use in a Velocity template with kwex. While there is XML in this template, it's only here for demonstrative purposes; this is not a a valid PDS4 label.


Accessing PDS3 Label Keywords
=============================

PDS3 Format
PRODUCT_ID           = "MPF_0408549348_0X539_ENG"                             

Kwex Format
<title>$label.PRODUCT_ID</title>


Substitute Strings
==================

PDS3 Format
^HEADER = "MPF_0408549348_0X539_ENG.FIT"                                      

The ^ character is not valid as a part of a Java/Velocity variable name, so a substitute string ("PTR_") is required. See pds3/var_sub.json for other substitute strings.

Kwex Format
<file_name>$label.PTR_HEADER</file_name>


Object Keywords
===============

PDS3 Format
OBJECT                          = IMAGE                                       
  LINES                           = 128                                       
END_OBJECT                      = IMAGE                                       

Kwex Format
<elements>$label.IMAGE.LINES</elements>


List Keywords
=============

PDS3 Format
QUATERNION = (                                                                
  0.6747193335                                                                
, 0.09102432689                                                               
, -0.1695994624                                                               
, 0.7125337994                                                                
 )                                                                            

Individual elements of the list are accessed by index.
 
Kwex Format
<geom:qsin3>$label.QUATERNION[3]</geom:qsin3>


<Units>
=======

PDS3 Format
CELESTIAL_NORTH_CLOCK_ANGLE = 262.7 <DEGREE>                                  

The value and unit of this keyword are stored and accessed separately.

Kwex Format
<geom:celestial_north_clock_angle unit="$label.CELESTIAL_NORTH_CLOCK_ANGLE.unit">$label.CELESTIAL_NORTH_CLOCK_ANGLE.value</geom:celestial_north_clock_angle>

Note: "DEGREE" is not a valid unit for the attribute geom:celestial_north_clock_angle, so conversion would be required. See the Java HashMap example later on for handling.


Accessing FITS Keywords
=======================

FITS Format
NAXIS1  =                 5024                                                  

Kwex Format
<elements>$fits.NAXIS1</elements>


FITS Extensions
===============

FITS Format, Extension 1
NAXIS1  =                 5024                                                  

Kwex Format
<elements>$fits_ext1.NAXIS1</elements>


Iterating FITS Keywords
=======================

FITS Format
QA00    =   0.6793889826282059 / cos(theta/2)     - Quaternion to xform image   
QA01    =   0.6793881374929833 / cos(theta/2)     - Quaternion to xform image   
QA02    =   0.6793931262947688 / cos(theta/2)     - Quaternion to xform image   

When there are otherwise identical keywords differentiated by index, all values are stored in a list with a name equal to the keyword sans index. You can loop through this list to populate multiple attributes at once.

Kwex Format
#foreach ($q in $fits.QA)
<sb:qcos>$q</sb:qcos>
#end


Accessing SPICE Keywords
========================

SPICE keywords are "accessed" from spice/spice_cals.json, which lists keywords and corresponding SPICE function calls and formulas for deriving the value of that keyword. See spice/names_and_functions.txt for the list of variable names and functions that are available for use.

SPICE Format
"SPCQA": "spice.m2q(i2j_mat)[0]"
i2j_mat                                         =   spice.pxform(instr_frame, ref_frame, et)

Kwex Format
<geom:qcos>$spice.SPCQA</geom:qcos>


Variable Declarations
=====================

Variables can be defined in the body of a template with the set command.

#set ( $some_variable = "monkey" )
<monkey_attribute>$some_variable</monkey_attribute>


Formal Reference Notation
=========================

If you need to insert a value into another string without confusing Velocity, use "format reference notation" to get the value of the variable.

<start_date_time>${label.START_TIME}Z</start_date_time>

Enclosing the variable reference in brackets ensures you fetch the value of the START_TIME and not START_TIMEZ.


Java HashMaps
=============

Java HashMaps let you map a set of values you get from one place to a different set of values you need to use. They are defined in the body of the template file (or in a different .vm file and accessed via the parse command).

#set ( $angleMap = { "DEGREE" : "deg",
					 "RADIAN" : "rad",
					 "HOUR" : "hr" } )
					 
#set ( $unit = $angleMap["$label.CELESTIAL_NORTH_CLOCK_ANGLE.unit"] )
<geom:celestial_north_clock_angle unit="$unit">$label.CELESTIAL_NORTH_CLOCK_ANGLE.value</geom:celestial_north_clock_angle>


Math
====

Velocity does not always treat variables as numbers, so they must be converted to numbers using the $numberTool.toNumber() Java method inside a set command. From there, you can perform basic mathematical operations on the variable.

#set ( $pos_to_tar_x = $numberTool.toNumber($fits.SPCTSOX) * -1)
<geom:x_position unit="km">$pos_to_tar_x</geom:x_position>


If Logic
========

You can customize which parts of a template are used with if statements.

#if ( $fits.SPCBRRA != "-1e+32" )
<geom:right_ascension_angle unit="deg">$fits.SPCBRRA</geom:right_ascension_angle>
#end

The block between if and end will appear if the statement in parentheses is true or not appear if it isn't.

You can also use else statements.

#if ( "$fits.DETECTOR" == "FRAME" )
	#set ( $otype = "Frame Sequence" )
#else
	#set ( $otype = "Single Image" )
#end
<sb:image_observation_type>$otype</sb:image_observation_type>

(Indentation is not necessary, but helpful.)
